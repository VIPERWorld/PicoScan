#include "pointcloud.h"

#include <iostream>
#include <fstream>

#include <stdio.h>
#include <stdlib.h>

#include <opencv2/core/core.hpp>


PointCloud::PointCloud()
{
}

void PointCloud::saveObj(const char *fnm)
{
    std::ofstream obj;
    unsigned int i;
    cv::Point3d pt;
    obj.open (fnm);
    obj << "# Scan generated by Scan Studio" << std::endl <<
           "# " << pts.size() << " vertices" << std::endl;
    for(i = 0; i < pts.size(); i++){
        pt = pts.at(i);
        obj << "v " << pt.x <<
               " " << pt.y <<
               " " << pt.z << std::endl;
    }
    obj.close();
}

void PointCloud::savePly(const char *fnm)
{
    std::ofstream ply;
    unsigned int i;
    cv::Point3d pt;
    ply.open (fnm);
    ply << "ply" << std::endl << "format ascii 1.0" << std::endl;
    ply << "comment Scan generated by Scan Studio" << std::endl <<
           "element vertex " << pts.size() << std::endl;
    ply << "property float x\n"
           "property float y\n"
           "property float z\n"
           "end_header\n";
    for(i = 0; i < pts.size(); i++){
        pt = pts.at(i);
        ply << pt.x <<
               " " << pt.y <<
               " " << pt.z << std::endl;
    }
    ply.close();
}

void PointCloud::saveMatlab(const char *fnm)
{

    std::ofstream ply;
    unsigned int i;
    cv::Point3d pt;
    ply.open (fnm);
    ply << "X = [";
    for(i = 0; i < pts.size(); i++){
        if(i>0) ply << " ; ";
        pt = pts.at(i);
        ply << pt.x <<
               " " << pt.y <<
               " " << pt.z;
    }
    ply << "];";
    ply.close();
}

void PointCloud::meshlab(const char *fnm)
{
    char buffer[256];
    saveObj(fnm);
    std::sprintf(buffer,"meshlab \"%s\"",fnm);
    system(buffer);
}

void PointCloud::add(cv::Point3d p)
{
    pts.push_back(p);
}

void PointCloud::add(PointCloud cloud)
{
    unsigned int i;
    for(i = 0; i < cloud.size(); i++){
        pts.push_back(cloud.get(i));
    }
}

void PointCloud::translateOrigin(cv::Point3d pt)
{
    unsigned int i;
    for(i = 0; i < size(); i++){
        pts.at(i) = pts.at(i) - pt;
    }
}

void PointCloud::rotateY(double angle)
{
    unsigned int i;
    cv::Matx33d R = cv::Matx33d(
                cos(angle),   0,  -sin(angle),
                      0,      1,      0,
                sin(angle),   0,  cos(angle));

    for(i = 0; i < size(); i++){
        pts.at(i) = R * pts.at(i);
    }
}


void PointCloud::rotateX(double angle)
{
    unsigned int i;
    cv::Matx33d R = cv::Matx33d(
                   1,      0,          0,
                   0, cos(angle), -sin(angle),
                   0, sin(angle), cos(angle));

    for(i = 0; i < size(); i++){
        pts.at(i) = R * pts.at(i);
    }
}

unsigned int PointCloud::size()
{
    return pts.size();
}

cv::Point3d PointCloud::get(int i)
{
    return pts.at(i);
}
